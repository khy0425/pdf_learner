// Mocks generated by Mockito 5.4.5 from annotations
// in pdf_learner_v2/test/widgets/pdf_viewer/pdf_viewer_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;
import 'dart:ui' as _i6;

import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i3;
import 'package:pdf_learner_v2/domain/models/pdf_bookmark.dart' as _i4;
import 'package:pdf_learner_v2/presentation/viewmodels/pdf_viewer_viewmodel.dart'
    as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [PDFViewerViewModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockPDFViewerViewModel extends _i1.Mock
    implements _i2.PDFViewerViewModel {
  MockPDFViewerViewModel() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.PDFViewerState get state =>
      (super.noSuchMethod(
            Invocation.getter(#state),
            returnValue: _i2.PDFViewerState.initial,
          )
          as _i2.PDFViewerState);

  @override
  _i2.PDFViewerError get error =>
      (super.noSuchMethod(
            Invocation.getter(#error),
            returnValue: _i2.PDFViewerError.none,
          )
          as _i2.PDFViewerError);

  @override
  String get errorMessage =>
      (super.noSuchMethod(
            Invocation.getter(#errorMessage),
            returnValue: _i3.dummyValue<String>(
              this,
              Invocation.getter(#errorMessage),
            ),
          )
          as String);

  @override
  int get currentPage =>
      (super.noSuchMethod(Invocation.getter(#currentPage), returnValue: 0)
          as int);

  @override
  int get totalPages =>
      (super.noSuchMethod(Invocation.getter(#totalPages), returnValue: 0)
          as int);

  @override
  bool get isLoading =>
      (super.noSuchMethod(Invocation.getter(#isLoading), returnValue: false)
          as bool);

  @override
  List<_i4.PDFBookmark> get bookmarks =>
      (super.noSuchMethod(
            Invocation.getter(#bookmarks),
            returnValue: <_i4.PDFBookmark>[],
          )
          as List<_i4.PDFBookmark>);

  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);

  @override
  _i5.Future<void> loadDocument(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#loadDocument, [id]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> changePage(int? pageNumber) =>
      (super.noSuchMethod(
            Invocation.method(#changePage, [pageNumber]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> addBookmark({String? note}) =>
      (super.noSuchMethod(
            Invocation.method(#addBookmark, [], {#note: note}),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> deleteBookmark(String? bookmarkId) =>
      (super.noSuchMethod(
            Invocation.method(#deleteBookmark, [bookmarkId]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> toggleFavorite() =>
      (super.noSuchMethod(
            Invocation.method(#toggleFavorite, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );

  @override
  void addListener(_i6.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#addListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void removeListener(_i6.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#removeListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void notifyListeners() => super.noSuchMethod(
    Invocation.method(#notifyListeners, []),
    returnValueForMissingStub: null,
  );
}
