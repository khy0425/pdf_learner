// Mocks generated by Mockito 5.4.5 from annotations
// in pdf_learner_v2/test/repositories/pdf_repository_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;
import 'dart:io' as _i5;

import 'package:mockito/mockito.dart' as _i1;
import 'package:pdf_learner_v2/domain/models/pdf_bookmark.dart' as _i6;
import 'package:pdf_learner_v2/domain/models/pdf_document.dart' as _i2;
import 'package:pdf_learner_v2/domain/repositories/pdf_repository.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakePDFDocument_0 extends _i1.SmartFake implements _i2.PDFDocument {
  _FakePDFDocument_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [PDFRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockPDFRepository extends _i1.Mock implements _i3.PDFRepository {
  MockPDFRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.PDFDocument?> getDocument(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#getDocument, [id]),
            returnValue: _i4.Future<_i2.PDFDocument?>.value(),
          )
          as _i4.Future<_i2.PDFDocument?>);

  @override
  _i4.Future<List<_i2.PDFDocument>> getDocuments() =>
      (super.noSuchMethod(
            Invocation.method(#getDocuments, []),
            returnValue: _i4.Future<List<_i2.PDFDocument>>.value(
              <_i2.PDFDocument>[],
            ),
          )
          as _i4.Future<List<_i2.PDFDocument>>);

  @override
  _i4.Future<_i2.PDFDocument> importPDF(_i5.File? file) =>
      (super.noSuchMethod(
            Invocation.method(#importPDF, [file]),
            returnValue: _i4.Future<_i2.PDFDocument>.value(
              _FakePDFDocument_0(this, Invocation.method(#importPDF, [file])),
            ),
          )
          as _i4.Future<_i2.PDFDocument>);

  @override
  _i4.Future<_i2.PDFDocument> updateDocument(_i2.PDFDocument? document) =>
      (super.noSuchMethod(
            Invocation.method(#updateDocument, [document]),
            returnValue: _i4.Future<_i2.PDFDocument>.value(
              _FakePDFDocument_0(
                this,
                Invocation.method(#updateDocument, [document]),
              ),
            ),
          )
          as _i4.Future<_i2.PDFDocument>);

  @override
  _i4.Future<bool> deleteDocument(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#deleteDocument, [id]),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);

  @override
  _i4.Future<List<_i6.PDFBookmark>> getBookmarks(String? documentId) =>
      (super.noSuchMethod(
            Invocation.method(#getBookmarks, [documentId]),
            returnValue: _i4.Future<List<_i6.PDFBookmark>>.value(
              <_i6.PDFBookmark>[],
            ),
          )
          as _i4.Future<List<_i6.PDFBookmark>>);

  @override
  _i4.Future<void> addBookmark(_i6.PDFBookmark? bookmark) =>
      (super.noSuchMethod(
            Invocation.method(#addBookmark, [bookmark]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> deleteBookmark(String? bookmarkId) =>
      (super.noSuchMethod(
            Invocation.method(#deleteBookmark, [bookmarkId]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );

  @override
  _i4.Future<_i2.PDFDocument> addDocument(_i2.PDFDocument? document) =>
      (super.noSuchMethod(
            Invocation.method(#addDocument, [document]),
            returnValue: _i4.Future<_i2.PDFDocument>.value(
              _FakePDFDocument_0(
                this,
                Invocation.method(#addDocument, [document]),
              ),
            ),
          )
          as _i4.Future<_i2.PDFDocument>);
}
