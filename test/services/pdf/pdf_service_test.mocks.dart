// Mocks generated by Mockito 5.4.5 from annotations
// in pdf_learner_v2/test/services/pdf/pdf_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i4;
import 'package:pdf_learner_v2/services/pdf/pdf_service.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [PDFService].
///
/// See the documentation for Mockito's code generation for more information.
class MockPDFService extends _i1.Mock implements _i2.PDFService {
  MockPDFService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<bool> openPDF(String? filePath) =>
      (super.noSuchMethod(
            Invocation.method(#openPDF, [filePath]),
            returnValue: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);

  @override
  _i3.Future<int> getPageCount() =>
      (super.noSuchMethod(
            Invocation.method(#getPageCount, []),
            returnValue: _i3.Future<int>.value(0),
          )
          as _i3.Future<int>);

  @override
  _i3.Future<int> getCurrentPage() =>
      (super.noSuchMethod(
            Invocation.method(#getCurrentPage, []),
            returnValue: _i3.Future<int>.value(0),
          )
          as _i3.Future<int>);

  @override
  _i3.Future<bool> goToPage(int? pageNumber) =>
      (super.noSuchMethod(
            Invocation.method(#goToPage, [pageNumber]),
            returnValue: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);

  @override
  _i3.Future<List<int>> renderPage({int? width = 800, int? height = 1200}) =>
      (super.noSuchMethod(
            Invocation.method(#renderPage, [], {
              #width: width,
              #height: height,
            }),
            returnValue: _i3.Future<List<int>>.value(<int>[]),
          )
          as _i3.Future<List<int>>);

  @override
  _i3.Future<String> extractText() =>
      (super.noSuchMethod(
            Invocation.method(#extractText, []),
            returnValue: _i3.Future<String>.value(
              _i4.dummyValue<String>(this, Invocation.method(#extractText, [])),
            ),
          )
          as _i3.Future<String>);

  @override
  _i3.Future<Map<String, dynamic>> getMetadata() =>
      (super.noSuchMethod(
            Invocation.method(#getMetadata, []),
            returnValue: _i3.Future<Map<String, dynamic>>.value(
              <String, dynamic>{},
            ),
          )
          as _i3.Future<Map<String, dynamic>>);

  @override
  _i3.Future<List<int>> searchText(String? query) =>
      (super.noSuchMethod(
            Invocation.method(#searchText, [query]),
            returnValue: _i3.Future<List<int>>.value(<int>[]),
          )
          as _i3.Future<List<int>>);

  @override
  _i3.Future<bool> closePDF() =>
      (super.noSuchMethod(
            Invocation.method(#closePDF, []),
            returnValue: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);

  @override
  bool isOpen() =>
      (super.noSuchMethod(Invocation.method(#isOpen, []), returnValue: false)
          as bool);

  @override
  String getFilePath() =>
      (super.noSuchMethod(
            Invocation.method(#getFilePath, []),
            returnValue: _i4.dummyValue<String>(
              this,
              Invocation.method(#getFilePath, []),
            ),
          )
          as String);

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );
}
